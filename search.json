[{"categories":["frp"],"content":"记录一下frp如何配置TLS双向加密，以防后面忘记如何配置。建立任意一个文件夹...","date":"2025-03-07","objectID":"/posts/frp-configuration-for-mutual-tls-encrypted/","tags":["frp"],"title":"FRP配置TLS双向加密连接","uri":"/posts/frp-configuration-for-mutual-tls-encrypted/"},{"categories":["frp"],"content":"记录一下frp如何配置TLS双向加密，以防后面忘记如何配置。 建立任意一个文件夹，在文件夹下创建my-openssl.cnf文件，并写入一下配置： [ ca ] default_ca = CA_default [ CA_default ] x509_extensions = usr_cert [ req ] default_bits = 2048 default_md = sha256 default_keyfile = privkey.pem distinguished_name = req_distinguished_name attributes = req_attributes x509_extensions = v3_ca string_mask = utf8only [ req_distinguished_name ] [ req_attributes ] [ usr_cert ] basicConstraints = CA:FALSE nsComment = \"OpenSSL Generated Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer [ v3_ca ] subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = CA:true 生成默认 ca: openssl genrsa -out ca.key 2048 #生成长度为2048位的RSA私钥文件 openssl req -x509 -new -nodes -key ca.key -subj \"/CN=example.ca.com\" -days 3650 -out ca.crt #使用私钥文件(ca.key)生成自签名证书,有效期为10年 #也可以使用替代下述替代,会提示输入 Country Name、Organization Name 等 openssl req -x509 -new -nodes -key ca.key -days 3650 -out ca.crt 生成服务端证书: openssl genrsa -out server.key 2048 #服务端证书 #生成服务端证书签名请求 openssl req -new -sha256 -key server.key \\ -subj \"/C=XX/ST=DEFAULT/L=DEFAULT/O=DEFAULT/CN=server.com\" \\ -reqexts SAN \\ -config \u003c(cat my-openssl.cnf \u003c(printf \"\\n[SAN]\\nsubjectAltName=DNS:localhost,IP:FRP服务端公网ip,DNS:example.server.com\")) \\ -out server.csr #使用CA跟证书和私钥对csr进行签名，签发服务端证书,有效期365天 openssl x509 -req -days 365 -sha256 \\ -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial \\ -extfile \u003c(printf \"subjectAltName=DNS:localhost,IP:FRP服务端公网ip地址,DNS:example.server.com\") \\ -out server.crt Tips: ​ 1、 -subj “/C=XX/ST=DEFAULT/L=DEFAULT/O=DEFAULT/CN=server.com” 指的是证书的证书持有者的身份信息，可以根据实际情况替换吗，这里使用默认DEFAULT /CN国家代码 /ST省份 /L城市 /O 组织名称 /CN通用名称 #示例 -subj \"/C=CN/ST=Beijing/O=\\\"My Company, Ltd\\\"/CN=app.example.com\" ​ 2、config参数结合实际填写，这里SAN字段是自签名校验证书是否有效的关键配置 -config \u003c(cat my-openssl.cnf \u003c(printf \"\\n[SAN]\\nsubjectAltName=DNS:localhost,IP:127.0.0.1,DNS:example.server.com\")) ​ SAN(subjectAltName)字段后面跟的DNS和IP是指该证书(记录)允许的域名或IP。 ​ e.g: SAN=DNS:a.com,DNS:b.com IP:192.168.1.12 ​ 访问域名 a.com san条目 a.com 匹配 结果 成功-\u003e安全 ​ 访问域名 c.com san条目 a.com 不匹配 结果 失败-\u003e不安全 ​ 访问域名 192.168.1.12 san条目 192.168.1.12 结果 成功-\u003e安全 ​ 在这里客户端验证服务端证书时，检验的是①证书是否由可信的 CA 签发；② 客户端要实际连接的域名或 IP是否在证书的SAN中，若不在会拒绝链接。 生成客户端证书： openssl genrsa -out client.key 2048 #生成客户端证书签名请求 openssl req -new -sha256 -key client.key \\ -subj \"/C=XX/ST=DEFAULT/L=DEFAULT/O=DEFAULT/CN=client.com\" \\ -reqexts SAN \\ -config \u003c(cat my-openssl.cnf \u003c(printf \"\\n[SAN]\\nsubjectAltName=DNS:client.com,DNS:example.client.com\")) \\ -out client.csr #使用CA跟证书和私钥对csr进行签名，签发客户端证书,有效期365天 openssl x509 -req -days 365 -sha256 \\ -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial \\ -extfile \u003c(printf \"subjectAltName=DNS:client.com,DNS:example.client.com\") \\ -out client.crt Tips: ​ Q：服务端SAN字段与客户端SAN字段不一致，服务端是如何校验客户端证书的？ ​ A：双向TLS中，服务端验证的重点是签发CA和用途，客户端证书是否有可信CA(ca.crt)签发 客户端证书扩展用途。除非服务端明确指定客户端的SAN，否则无强制要求。 生成完毕后，结果应该如下图所示： 有了上述文件后，接下来着手修改frps和frpc的配置： frps: (示例) bindPort = 17000 #Auth auth.method = \"token\" auth.token = \"fxxxxxxxxxxx86\" #TLS transport.tls.force = true transport.tls.certFile = \"/etc/frps/server.crt\" transport.tls.keyFile = \"/etc/frps/server.key\" transport.tls.trustedCaFile = \"/etc/frps/ca.crt\" #Log log.to = \"/var/log/frp/frps.log\" log.level = \"debug\" log.maxDays = 7 frpc: (示例) serverAddr = \"x.x.x.x\" serverPort = 17000 auth.method = \"token\" auth.token = \"fxxxxxxxxxxx86\" #tls配置 transport.tls.enable = true transport.tls.certFile = \"/etc/frp/certificate/client.crt\" transport.tls.keyFile = \"/etc/frp/certificate/client.key\" transport.tls.trustedCaFile = \"/etc/frp/certificate/ca.crt\" log.level = \"debug\" [[proxies]] name = \"abc\" type = \"tcp\" localIP = \"127.0.0.1\" localPort = 8088 remotePort = 8080 修改完毕后，重启frps和frpc使其生效。至此，客户端和服务端的双向验证配置完毕。 接下来就是抓包看下是否生效： ​ 1、记录下当前frps ip地址 ​ 2、使用tcpdump捕获17000端口流量 tcpdump -i eth0 port 17000 -w frp_traffic_17000.pcap (上图) ​ 3、将pcap数据包导入wireshark看是否生效 贴两张没配置TLS的图与之对比： ","date":"2025-03-07","objectID":"/posts/frp-configuration-for-mutual-tls-encrypted/:0:0","tags":["frp"],"title":"FRP配置TLS双向加密连接","uri":"/posts/frp-configuration-for-mutual-tls-encrypted/"},{"categories":["pve"],"content":"以下内容是记录LXC容器磁盘如何进行扩容操作...","date":"2024-03-01","objectID":"/posts/pve-lxc-container-disk-grow/","tags":["pve"],"title":"PVE系列-LXC容器磁盘扩容","uri":"/posts/pve-lxc-container-disk-grow/"},{"categories":["pve"],"content":"以下内容是记录LXC容器磁盘如何进行扩容操作 ​ 首先，选中要进行磁盘扩容的容器，停止它 ​ 打开shell终端，检查要扩容逻辑卷是否有问题，笔者这里是vm-100-disk-1 # 查看内部逻辑卷的输出信息 lvs #e2fsck检查该逻辑卷有无问题 e2fsck -f /dev/pve/vm-100-disk-1 ​ 没有问题的话，执行逻辑卷扩容操作 # 为逻辑卷增加100G容量 lvextend -L +100G /dev/pve/vm-100-disk-0 ​ 逻辑卷扩容完毕后，我们需要修改容器配置信息。若不修改，页面上显示的还是100G vim /etc/pve/local/lxc/100.conf ​ 修改完毕后，并没有完成扩容操作，我们还需要进行实际扩容工作。 #使用resize2fs进行实际容量扩容 resize2fs /dev/pve/vm-100-disk-1 200G ​ 注意这里200G是增加后的总容量。 ​ 完成后，进入PVE启动容器，查看是否扩容完成。 ​ Done~ ","date":"2024-03-01","objectID":"/posts/pve-lxc-container-disk-grow/:0:0","tags":["pve"],"title":"PVE系列-LXC容器磁盘扩容","uri":"/posts/pve-lxc-container-disk-grow/"},{"categories":["pve"],"content":"PVE系列-初始化设置 ","date":"2024-03-01","objectID":"/posts/pve-initialization-guide/:1:0","tags":["pve"],"title":"PVE系列-初始化设置","uri":"/posts/pve-initialization-guide/"},{"categories":["pve"],"content":"更新时区 ​ 首先使用data 和timedatectl 指令查看当前系统时间是否与你所在时区匹配，若匹配则不用修改。 ​ 若不匹配则使用dpkg-reconfigure 指令修改时区。 dpkg-reconfigure tzdata ​ 选择Asia即可 ","date":"2024-03-01","objectID":"/posts/pve-initialization-guide/:1:1","tags":["pve"],"title":"PVE系列-初始化设置","uri":"/posts/pve-initialization-guide/"},{"categories":["pve"],"content":"语言设置 ​ 修改系统默认语言为中文 dpkg-reconfigure locales ​ 选择zh_CN.UTF-8 UTF-8 (确认选定按下空格) ​ 确认选择zh_CN.UTF-8 UTF-8 ","date":"2024-03-01","objectID":"/posts/pve-initialization-guide/:1:2","tags":["pve"],"title":"PVE系列-初始化设置","uri":"/posts/pve-initialization-guide/"},{"categories":["pve"],"content":"硬件信息展示 ​ 使用下属脚本完成在PVE页码上展示cpu、磁盘等温度、频率、功率等信息 wget -c https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh \u0026\u0026 chmod +x showtempcpufreq.sh \u0026\u0026 ./showtempcpufreq.sh ","date":"2024-03-01","objectID":"/posts/pve-initialization-guide/:1:3","tags":["pve"],"title":"PVE系列-初始化设置","uri":"/posts/pve-initialization-guide/"},{"categories":["pve"],"content":"软件源更换 ​ 参考《PVE更换软件\u0026LXC容器源》 ","date":"2024-03-01","objectID":"/posts/pve-initialization-guide/:1:4","tags":["pve"],"title":"PVE系列-初始化设置","uri":"/posts/pve-initialization-guide/"},{"categories":["pve"],"content":"开启远程登录 ​ 输入以下内容，允许终端登录，若有防火墙需要配置下防火墙规则，开放22端口。 #开启root登录 sed -i '/PermitRootLogin/ a PermitRootLogin yes' /etc/ssh/sshd_config #重启ssh服务,让配置生效 systemctrl restart sshd ","date":"2024-03-01","objectID":"/posts/pve-initialization-guide/:1:5","tags":["pve"],"title":"PVE系列-初始化设置","uri":"/posts/pve-initialization-guide/"},{"categories":["pve"],"content":"替换 apt软件源 直接使用下属命令完成一件替换操作 bash \u003c(curl -sSL https://linuxmirrors.cn/main.sh) ​ 任意选择一项，等待完成程序运行完即可。 ","date":"2024-03-01","objectID":"/posts/replace-lxc-container-source/:0:1","tags":["pve"],"title":"PVE系列-更换软件\u0026容器源","uri":"/posts/replace-lxc-container-source/"},{"categories":["pve"],"content":"修改LXC容器源 ​ 将 /usr/share/perl5/PVE/APLInfo.pm 文件中默认的源地址 http://download.proxmox.com 替换为 https://mirrors.tuna.tsinghua.edu.cn/proxmox 即可。 ​ 下面给出命令 #备份文件 cp /usr/share/perl5/PVE/APLInfo.pm /usr/share/perl5/PVE/APLInfo.pm_back #修改 sed -i 's|http://download.proxmox.com|https://mirrors.ustc.edu.cn/proxmox|g' /usr/share/perl5/PVE/APLInfo.pm #重启生效 systemctl restart pvedaemon 【Tips】 ​ 针对 /usr/share/perl5/PVE/APLInfo.pm 文件的修改，需重启后才能生效。 ","date":"2024-03-01","objectID":"/posts/replace-lxc-container-source/:0:2","tags":["pve"],"title":"PVE系列-更换软件\u0026容器源","uri":"/posts/replace-lxc-container-source/"},{"categories":["pve"],"content":"禁用PVE-Enterperise ​ 如下图所示 ","date":"2024-03-01","objectID":"/posts/replace-lxc-container-source/:0:3","tags":["pve"],"title":"PVE系列-更换软件\u0026容器源","uri":"/posts/replace-lxc-container-source/"},{"categories":["pve"],"content":"更换Ceph源 ​ 修改/etc/apt/sources.list.d/ceph.list文件，将内容改成如下所示。 # deb https://enterprise.proxmox.com/debian/ceph-quincy bookworm enterprise deb https://mirrors.ustc.edu.cn/proxmox/debian/ceph-quincy/ bookworm no-subscription cp /usr/share/perl5/PVE/CLI/pveceph.pm /usr/share/perl5/PVE/CLI/pveceph.pm_back sed -i 's|http://download.proxmox.com|https://mirrors.ustc.edu.cn/proxmox|g' /usr/share/perl5/PVE/CLI/pveceph.pm ","date":"2024-03-01","objectID":"/posts/replace-lxc-container-source/:0:4","tags":["pve"],"title":"PVE系列-更换软件\u0026容器源","uri":"/posts/replace-lxc-container-source/"},{"categories":["pve"],"content":"下载模板前请务必确保已经替换过LXC源，若还未替换可参考[《PVE系列-更换软件\u0026容器源》](https://gvnote.com/p/replace-lxc-container-source)进行更换LXC源操作。","date":"2024-02-29","objectID":"/posts/pve-lxc-setup-and-docker-install/","tags":["pve","lxc"],"title":"PVE系列-初始化LXC容器并安装Docker","uri":"/posts/pve-lxc-setup-and-docker-install/"},{"categories":["pve"],"content":"模板下载 ​ 下载模板前请务必确保已经替换过LXC源，若还未替换可参考《PVE系列-更换软件\u0026容器源》进行更换LXC源操作。 ​ 在PVE后台页面选择 local(pve) -\u003e CT模板 -\u003e 模板 选择对应镜像下载。这里以debian12为例： ​ 点击下载并等待下载完成。 ","date":"2024-02-29","objectID":"/posts/pve-lxc-setup-and-docker-install/:0:1","tags":["pve","lxc"],"title":"PVE系列-初始化LXC容器并安装Docker","uri":"/posts/pve-lxc-setup-and-docker-install/"},{"categories":["pve"],"content":"创建LXC容器 ​ 点击右上方创建CT 来创建LXC容器 ​ 勾选无特权的容器 选项并填写配置信息 ​ 模板选择刚下载好的debian12 ​ 根据实际需要划分磁盘大小，笔者这边有存储需要，因此新增了一块存储磁盘 ​ CPU和内存分配根据实际需求划分即可。这边以运行gitlab为例，2C8G200G。 ​ 网络配置 ​ 若ipv6获取不到地址，切换为SLAAC尝试下 ​ DNS保持默认即可 ​ 等待创建完成 ","date":"2024-02-29","objectID":"/posts/pve-lxc-setup-and-docker-install/:0:2","tags":["pve","lxc"],"title":"PVE系列-初始化LXC容器并安装Docker","uri":"/posts/pve-lxc-setup-and-docker-install/"},{"categories":["pve"],"content":"启动LXC容器 ​ 创建完成后，来到选项控制台模式 调整为 shell ，否则启动后是黑屏状态。 调整为shell后再点击启动。 ​ 点开控制台，开启远程链接。 #允许远程登录 sed -i '/PermitRootLogin/ a PermitRootLogin yes' /etc/ssh/sshd_config #重启ssh服务 systemctl restart sshd ​ ok，使用ssh终端测试能否链接上 初始化配置 时区 dpkg-reconfigure tzdata 语言 dpkg-reconfigure locales 软件源更换 ​ 由于模板并未预装 curl，所以我们需要手动安装下 apt update apt install curl ​ 完成之后再执行下属命令 bash \u003c(curl -sSL https://linuxmirrors.cn/main.sh) ","date":"2024-02-29","objectID":"/posts/pve-lxc-setup-and-docker-install/:0:3","tags":["pve","lxc"],"title":"PVE系列-初始化LXC容器并安装Docker","uri":"/posts/pve-lxc-setup-and-docker-install/"},{"categories":["pve"],"content":"核显配置 ​ 如果你创建的LXC容器不需要使用核显的话，这一部分可以跳过。 ​ 【注意】下述操作需要在宿主机操作 ​ 使用命令ls -l /dev/dri 查询硬件信息 ​ 这里的226,0和226,128是主次设备号 ​ 编辑配置文件/etc/pve/lxc/容器id.conf ​ 我这边是 /etc/pve/lxc/100.conf #新增下列内容 lxc.cgroup2.devices.allow: c 226:0 rwm lxc.cgroup2.devices.allow: c 226:128 rwm lxc.cgroup2.devices.allow: c 29:0 rwm lxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir lxc.mount.entry: /dev/fb0 dev/fb0 none bind,optional,create=file lxc.apparmor.profile: unconfined ​ 参数说明： ​ lxc.apparmor.profile: unconfined用于关闭 LXC 容器的apparmor保护，开启状态无法安装 Docker Tips ​ 核显这部分内容还尚未测试 ","date":"2024-02-29","objectID":"/posts/pve-lxc-setup-and-docker-install/:0:4","tags":["pve","lxc"],"title":"PVE系列-初始化LXC容器并安装Docker","uri":"/posts/pve-lxc-setup-and-docker-install/"},{"categories":["pve"],"content":"安装Docker ​ 设置docker的apt源 sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\ $(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\") stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null sudo apt-get update ​ 安装docker软件包 sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin ​ 验证是否安装成功 sudo docker run hello-world ​ 开机启动 systemctrl enable docker docker-compose安装 ​ 下载compose curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose ​ 赋予权限 chmod +x /usr/local/bin/docker-compose ​ 测试 docker-compose 配置Gitlab ​ 使用docker-compose的方式部署，这里直接放上配置文件 version: '3.6' services: gitlab: image: gitlab/gitlab-ce:latest container_name: gitlab restart: always hostname: '192.168.10.102' #没有域名填写本机ip environment: TZ: 'Asia/Shanghai' GITLAB_OMNIBUS_CONFIG: | external_url 'http://192.168.10.102' #可填本机ip gitlab_rails['time_zone'] = 'Asia/Shanghai' gitlab_rails['backup_keep_time'] = 1296000 # 15 Day, 1296000 seconds gitlab_rails['gitlab_shell_ssh_port'] = 2222 #ssh端口 #CI/CD gitlab_rails['gitlab_default_projects_features_builds'] = false #自定义头像 gitlab_rails['gravatar_plain_url'] = 'http://www.gravatar.com/avatar/%{hash}?s=%{size}\u0026d=identicon' ports: - '2080:80' - '2443:443' - '2222:22' volumes: - '/data/gitlab/config:/etc/gitlab' - '/data/gitlab/logs:/var/log/gitlab' - '/data/gitlab/data:/var/opt/gitlab' shm_size: '256m' 优化gitlab 修改gitlab的配置，找到/etc/gitlab/gitlab.rb文件，添加下属配置： #puma相关 puma['worker_timeout'] = 60 puma['worker_processes'] = 2 puma['per_worker_max_memory_mb'] = 768 #postgresql相关 postgresql['max_worker_processes'] = 4 postgresql['shared_buffers'] = \"128MB\" #关闭prometheus prometheus_monitoring['enable'] = false #sidekiq相关 sidekiq['max_concurrency'] = 10 相关参数设置参考官方给出的配置 https://docs.gitlab.com/omnibus/settings/memory_constrained_envs.html ","date":"2024-02-29","objectID":"/posts/pve-lxc-setup-and-docker-install/:0:5","tags":["pve","lxc"],"title":"PVE系列-初始化LXC容器并安装Docker","uri":"/posts/pve-lxc-setup-and-docker-install/"},{"categories":["Ardunio"],"content":"安装Python环境 官网下载https://www.python.org/downloads/ 安装包并进行安装。 验证Python是否安装成功 ","date":"2024-02-09","objectID":"/posts/platform-thrid-ide-installation/:0:1","tags":["Ardunio","CLion","Ardunio IDE"],"title":"使用Clion配置Ardunio开发环境","uri":"/posts/platform-thrid-ide-installation/"},{"categories":["Ardunio"],"content":"安装PlatFormIO(core) 点击下载脚本 get-platformio.py 下载脚本后，在Cmd命令行里执行 python get-platformio.py 等待安装下载完成 ","date":"2024-02-09","objectID":"/posts/platform-thrid-ide-installation/:0:2","tags":["Ardunio","CLion","Ardunio IDE"],"title":"使用Clion配置Ardunio开发环境","uri":"/posts/platform-thrid-ide-installation/"},{"categories":["Ardunio"],"content":"PlatformIO安装验证 设置C:\\Users\\Gavin\\.platformio\\penv\\Scripts文件夹到环境变量Path中 tips ​ 如果添加后在第二部验证无效果，请删除path环境变量重新添加即可。 输入pio验证platform安装是否成功 ","date":"2024-02-09","objectID":"/posts/platform-thrid-ide-installation/:0:3","tags":["Ardunio","CLion","Ardunio IDE"],"title":"使用Clion配置Ardunio开发环境","uri":"/posts/platform-thrid-ide-installation/"},{"categories":["Ardunio"],"content":"CLion插件配置 Market搜索PlatformIO for Clion并安装，安装完成后重启CLion 新建项目–\u003ePlatformIO–\u003e输入 arduino uno 创建项目 等待platformIO-core创建的项目初始化完毕 验证是否按照成功 接上Ardunio Uno开发板 随意编写一段程序通过CLion上传，观察控制台输出。 点击上方的绿色小三角，等待编译烧录完成。 查看输出结果 ​ OK，上述就是如何使用CLion配置Ardunio开发环境。 ​ End ","date":"2024-02-09","objectID":"/posts/platform-thrid-ide-installation/:0:4","tags":["Ardunio","CLion","Ardunio IDE"],"title":"使用Clion配置Ardunio开发环境","uri":"/posts/platform-thrid-ide-installation/"}]